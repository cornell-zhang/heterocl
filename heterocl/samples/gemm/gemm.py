import heterocl as hcl
import numpy as np

#Matricies are of 32 bit integers
hcl.config.init_dtype = hcl.Int()
block_size = 8

def gemm():
 
	#These 2 64x64 matricies are multiplied in a blocked manner as part of GEMM, resulting in out_matrix
	matrix_1 = hcl.placeholder((64, 64))
	matrix_2 = hcl.placeholder((64, 64))

	#reduction (summation)
	k = hcl.reduce_axis(0, 64, 'k')
	out_matrix = hcl.compute((64, 64), lambda x, y: hcl.sum(matrix_1[x, k] * matrix_2[k, y], axis=k))
	s = hcl.create_schedule(out_matrix)

	#Splitting the axis and reordering for blocked
	y0, y1 = s[out_matrix].split(out_matrix.axis[0], factor = block_size)
	x0, x1 = s[out_matrix].split(out_matrix.axis[1], factor = block_size)

	s[out_matrix].reorder(y0, x0, y1, x1)

	f = hcl.build(s, [matrix_1, matrix_2, out_matrix])
	return f


#below 2 arrays are generated by numpy
np_1 = np.random.randint(100, size=(64, 64))
np_2 = np.random.randint(100, size=(64, 64)) 

#to hcl-compatible array
hcl_m1 = hcl.asarray(np_1)
hcl_m2 = hcl.asarray(np_2)
hcl_m3 = hcl.asarray(np.zeros((64, 64)))

#run the gemm computation using hcl
f = gemm()
f(hcl_m1, hcl_m2, hcl_m3)

#run the gemm computation using numpy to cross-compare
np_m3 = np.matmul(np_1, np_2)

print '\n===HCL Gemm Result===\n'
print hcl_m3
print '\n\n'
print '===Numpy GEMM result===\n' 
print np_m3
