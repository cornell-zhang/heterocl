
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/tutorial_05_dtype.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_tutorial_05_dtype.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_tutorial_05_dtype.py:


Data Type Customization
=======================

**Author**: Yi-Hsiang Lai (seanlatias@github)

In this tutorial, we will show the data types supported by HeteroCL. In
addition, we will demonstrate how to apply data type customization in
HeteroCL.

.. GENERATED FROM PYTHON SOURCE LINES 14-17

.. code-block:: default


    import heterocl as hcl








.. GENERATED FROM PYTHON SOURCE LINES 18-23

Data Types Supported by HeteroCL
--------------------------------
HeteroCL supports both bit-accurate data types and floating points. We show
some examples below. If no argument is provided, the default bitwidth for
each type is 32.

.. GENERATED FROM PYTHON SOURCE LINES 23-31

.. code-block:: default


    hcl.Int(15)  # 15-bit signed integer
    hcl.UInt(24)  # 24-bit unsigned integer
    hcl.Fixed(13, 5)  # 13-bit signed fixed point with 5 fractional bits
    hcl.UFixed(44, 30)  # 44-bit unsigned fixed point with 30 fractional bits
    hcl.Float(32)  # single-precision floating point
    hcl.Float(64)  # double-precision floating point





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Float(64)



.. GENERATED FROM PYTHON SOURCE LINES 32-33

These data types can be used in ``hcl.init`` to set the default data type

.. GENERATED FROM PYTHON SOURCE LINES 33-36

.. code-block:: default


    hcl.init(hcl.Float())








.. GENERATED FROM PYTHON SOURCE LINES 37-43

Data Type Customization
-----------------------
Another important hardware customization is data type customization, which
can be data quantization or downsizing a data type. Data quantization has
been proved to improve hardware efficiency in many accelerators. In HeteroCL,
to apply data type customization, we need to use ``hcl.create_scheme``,

.. GENERATED FROM PYTHON SOURCE LINES 43-51

.. code-block:: default


    A = hcl.placeholder((10,))


    def quantization(A):
        return hcl.compute(A.shape, lambda x: hcl.tanh(A[x]), "B")









.. GENERATED FROM PYTHON SOURCE LINES 52-53

First, let's build the application without applying any quantization scheme.

.. GENERATED FROM PYTHON SOURCE LINES 53-72

.. code-block:: default


    s = hcl.create_schedule([A], quantization)
    f = hcl.build(s)

    import numpy as np

    hcl_A = hcl.asarray(np.random.rand(10) * 2 - 1)
    hcl_B = hcl.asarray(np.zeros(10))

    f(hcl_A, hcl_B)

    np_A = hcl_A.asnumpy()
    np_B = hcl_B.asnumpy()

    print("Before tanh")
    print(np_A)
    print("After tanh")
    print(np_B)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Before tanh
    [-0.31524643 -0.81970078  0.39499223  0.54481202 -0.05556045  0.21780533
     -0.40408552  0.29115361 -0.90069896 -0.32317933]
    After tanh
    [-0.30520242 -0.67490697  0.37565598  0.49662185 -0.05550335  0.21442528
     -0.38343924  0.28319624 -0.71663803 -0.31237885]




.. GENERATED FROM PYTHON SOURCE LINES 73-75

Now let's use ``hcl.create_scheme`` to create a quantization scheme. The
usage is the same as ``hcl.create_schedule``.

.. GENERATED FROM PYTHON SOURCE LINES 75-79

.. code-block:: default


    sm = hcl.create_scheme([A], quantization)
    sm_B = quantization.B








.. GENERATED FROM PYTHON SOURCE LINES 80-86

After we create the schemes, we have two methods that can be used. First,
if we are dealing with **integers**, we need to use ``downsize``. Second,
if we are dealing with **floating points**, we need to use ``quantize``.
No matter which method we choose, the first parameter is a list of tensors
we want to quantize/downsize and the second parameter is the target data
type.

.. GENERATED FROM PYTHON SOURCE LINES 86-89

.. code-block:: default


    sm.quantize(sm_B, hcl.Fixed(10, 8))








.. GENERATED FROM PYTHON SOURCE LINES 90-95

In this example, since we know the output of `tanh` is between 1 and -1,
we can safely set the integer part to be 2 bits (i.e., 10-8). The larger
total bitwidth we choose, the more accurate we get. Now we can create the
schedule by using ``hcl.create_schedule_from_scheme``, build the executable,
and test it.

.. GENERATED FROM PYTHON SOURCE LINES 95-110

.. code-block:: default


    sl = hcl.create_schedule_from_scheme(sm)
    f = hcl.build(sl)

    hcl_BQ = hcl.asarray(np.zeros(10), dtype=hcl.Fixed(10, 8))

    f(hcl_A, hcl_BQ)

    np_BQ = hcl_BQ.asnumpy()

    print("Without quantization")
    print(np_B)
    print("Quantized to Fixed(10, 8)")
    print(np_BQ)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Without quantization
    [-0.30520242 -0.67490697  0.37565598  0.49662185 -0.05550335  0.21442528
     -0.38343924  0.28319624 -0.71663803 -0.31237885]
    Quantized to Fixed(10, 8)
    [-0.3046875  -0.671875    0.375       0.49609375 -0.0546875   0.2109375
     -0.3828125   0.28125    -0.71484375 -0.30859375]




.. GENERATED FROM PYTHON SOURCE LINES 111-112

We can double-check this.

.. GENERATED FROM PYTHON SOURCE LINES 112-114

.. code-block:: default


    assert np.array_equal(np_BQ, np.trunc(np_B * 256) / 256)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.089 seconds)


.. _sphx_glr_download_gallery_tutorial_05_dtype.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: tutorial_05_dtype.py <tutorial_05_dtype.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: tutorial_05_dtype.ipynb <tutorial_05_dtype.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
