High-level synthesis (HLS) gains its importance due to the rapid development of FPGA designs. However, to program a highly optimized design requires lots of expertise and experience. To conquer this, domain-specific languages (DSL) are developed to let users describe their designs in a more high-level fashion (such as tensor operations) and easily perform design space exploration (DSE). There are many existing DSLs, such as Halide and TVM. Nonetheless, most of the DSLs do not
support imperative programming. Moreover, there is no clean code placement interface for efficient DSE. We propose heterogenous computing language (HeteroCL) to solve the above problems. HeteroCL is a DSL that combines both imperative and declarative programming and targets heterogeneous hardware devices, such as CPU, GPU, and FPGA. It also applies the programming style of decoupled function computation and scheduling, which is inspired by both Halide and TVM. Finally, it has a type
system specifically designed for the heterogeneous system.
